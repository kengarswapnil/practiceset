class Solution {
    // public void rotate(int[] nums, int k) {
    //    int n = nums.length;
    //    k = k%n;

    //    reverss(nums,0,n-1);
    //    reverss(nums,0,k-1);
    //    reverss(nums,k,n-1);       
    // }

    // public static void reverss(int [] nums ,int beg ,int end ){
    //     // while(beg <= end){
    //     //     int temp = nums[beg];
    //     //     nums[beg] = nums[end];
    //     //     nums[end] = temp;
    //     //    beg++;
    //     //    end--; 
    //     // }

    //     ArrayList<Integer> res = new ArrayList<>(nums.length);
    //     Collections.reverse(res);

    // }
     public void rotate(int[] nums, int k) {
       int n = nums.length;
       k = k%n;

       List<Integer> res = new ArrayList<>();
       for(int num : nums){
        res.add(num);
       }  

       Collections.reverse(res);
       Collections.reverse(res.subList(0,k));
       Collections.reverse(res.subList(k,n));


       for(int i=0;i<n;i++){
        nums[i] = res.get(i);
       }
       

    }

   
}
